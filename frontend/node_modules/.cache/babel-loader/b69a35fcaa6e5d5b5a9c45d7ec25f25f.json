{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/forgit/temp/dass-team-23/src/frontend/src/components/viewpdf.js\",\n    _s = $RefreshSig$();\n\n// This code is actually responsible for taking the URL of the book from backend and show in the frontend using pdf-viewer\nimport React, { Component, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { Dropdown, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { useLocation } from \"react-router-dom\"; // This phucong pdf-viewer i am using(Really it's not a good pdf viewer, but can't find any other pdf-viewer which can render books using URLs)\n\nimport Viewer, { Worker } from '@phuocng/react-pdf-viewer';\nimport '@phuocng/react-pdf-viewer/cjs/react-pdf-viewer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Viewpdf() {\n  _s();\n\n  // When u click the 'view' btn on the ook then take a look at the URL above.It contains the book-name(actually book-id)...which we are using here to get the book-name\n  const search = useLocation().search;\n  const name = new URLSearchParams(search).get('book_name');\n  console.log(\"this is the book name\", name);\n  const [isAdmin, setAdmin] = useState(false);\n  const [url, setUrl] = useState(' '); // Setting the the state value to true if the user is logged in\n\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/user/legit\", {\n      withCredentials: true\n    }).then(res => {\n      // console.log(res.data, \"this is the response\");\n      if (!res.data) {// window.location = '/login';\n      } else {\n        setAdmin(true);\n      }\n    }).catch(err => {\n      console.log(err);\n    }); // getting the URL from the backend of the desired book and setting that in state\n\n    axios.get(\"http://localhost:4000/user/downloadpdf?filename=\" + name).then(res => {\n      console.log(res.data.url);\n      setUrl(res.data.url);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Worker, {\n          workerUrl: \"https://unpkg.com/pdfjs-dist@2.6.347/build/pdf.worker.min.js\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"pdfviewer\",\n            children: /*#__PURE__*/_jsxDEV(Viewer, {\n              fileUrl: url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Viewpdf, \"eWh5kV1MaK66IzO2kbBa50cKT9I=\", false, function () {\n  return [useLocation];\n});\n\n_c = Viewpdf;\n\nvar _c;\n\n$RefreshReg$(_c, \"Viewpdf\");","map":{"version":3,"sources":["/Users/macbook/forgit/temp/dass-team-23/src/frontend/src/components/viewpdf.js"],"names":["React","Component","useState","useEffect","axios","Dropdown","Button","useLocation","Viewer","Worker","Viewpdf","search","name","URLSearchParams","get","console","log","isAdmin","setAdmin","url","setUrl","withCredentials","then","res","data","catch","err"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,iBAAjC;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,SAAQC,WAAR,QAA0B,kBAA1B,C,CACA;;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,2BAA/B;AACA,OAAO,oDAAP;;AAGA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAEhC;AACA,QAAMC,MAAM,GAAGJ,WAAW,GAAGI,MAA7B;AACA,QAAMC,IAAI,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,GAA5B,CAAgC,WAAhC,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCJ,IAArC;AAEE,QAAM,CAACK,OAAD,EAAUC,QAAV,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACiB,GAAD,EAAMC,MAAN,IAAgBlB,QAAQ,CAAC,GAAD,CAA9B,CAR8B,CAU9B;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACU,GAAN,CAAU,kCAAV,EAA8C;AAACO,MAAAA,eAAe,EAAE;AAAlB,KAA9C,EACCC,IADD,CACMC,GAAG,IAAI;AACX;AACA,UAAG,CAACA,GAAG,CAACC,IAAR,EAAa,CACT;AACH,OAFD,MAGI;AACFN,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KATD,EAUCO,KAVD,CAUOC,GAAG,IAAI;AACZX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD,KAZD,EADc,CAed;;AACAtB,IAAAA,KAAK,CAACU,GAAN,CAAU,qDAAqDF,IAA/D,EAAqEU,IAArE,CAA0EC,GAAG,IAAI;AAC/ER,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,IAAJ,CAASL,GAArB;AACAC,MAAAA,MAAM,CAACG,GAAG,CAACC,IAAJ,CAASL,GAAV,CAAN;AACD,KAHD;AAID,GApBQ,EAoBN,EApBM,CAAT;AAsBF,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BAuBI;AAAA,+BAEE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,8DAAlB;AAAA,iCACA;AAAK,YAAA,EAAE,EAAC,WAAR;AAAA,mCACE,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAEA;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GA/EuBT,O;UAGPH,W;;;KAHOG,O","sourcesContent":["// This code is actually responsible for taking the URL of the book from backend and show in the frontend using pdf-viewer\nimport React, { Component, useState, useEffect } from \"react\";\nimport axios from 'axios'\nimport { Dropdown, Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {useLocation} from \"react-router-dom\";\n// This phucong pdf-viewer i am using(Really it's not a good pdf viewer, but can't find any other pdf-viewer which can render books using URLs)\nimport Viewer, { Worker } from '@phuocng/react-pdf-viewer';\nimport '@phuocng/react-pdf-viewer/cjs/react-pdf-viewer.css';\n\n\nexport default function Viewpdf() {\n\n  // When u click the 'view' btn on the ook then take a look at the URL above.It contains the book-name(actually book-id)...which we are using here to get the book-name\n  const search = useLocation().search;\n  const name = new URLSearchParams(search).get('book_name');\n  console.log(\"this is the book name\", name); \n\n    const [isAdmin, setAdmin] = useState(false);\n    const [url, setUrl] = useState(' ');\n\n    // Setting the the state value to true if the user is logged in\n    useEffect(() => {\n      axios.get(\"http://localhost:4000/user/legit\", {withCredentials: true})\n      .then(res => {\n        // console.log(res.data, \"this is the response\");\n        if(!res.data){\n            // window.location = '/login';\n        }\n        else{\n          setAdmin(true)\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n      // getting the URL from the backend of the desired book and setting that in state\n      axios.get(\"http://localhost:4000/user/downloadpdf?filename=\" + name).then(res => {\n        console.log(res.data.url);\n        setUrl(res.data.url);\n      });\n    }, []);\n\n  return (\n    <div>\n      <div className=\"App\">\n        {/* DROP-DOWN for the language(will only be shown to admin). This can be used in the way that, after user chooses the language, the book should be converted to that language*/}\n\n        {/* {\n          isAdmin ?\n        <div className=\"dropdown\" align=\"left\">\n          <Dropdown>\n          <Dropdown.Toggle \n          variant=\"secondary btn-sm\" \n          id=\"dropdown-basicc\">\n              Language\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu style={{backgroundColor:'#00FFFF'}}>\n              <Dropdown.Item href=\"#\" >Hindi</Dropdown.Item>\n              <Dropdown.Item href=\"#\">Telugu</Dropdown.Item>\n              <Dropdown.Item href=\"#\">English</Dropdown.Item>\n          </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        : false\n      } */}\n\n          <div>\n            {/* The implementation the pdf-viewer */}\n            <Worker workerUrl=\"https://unpkg.com/pdfjs-dist@2.6.347/build/pdf.worker.min.js\">\n            <div id=\"pdfviewer\">\n              <Viewer fileUrl={url} />\n            </div>\n          </Worker>\n        </div>\n\n        {/* The delete book btn at the bottom of the book */}\n\n        {/* {\n          isAdmin ?\n        <div align=\"center\">\n          <button type=\"button\" className=\"btn btn-danger\">Delete this book?</button>\n        </div>\n        : false\n        } */}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}